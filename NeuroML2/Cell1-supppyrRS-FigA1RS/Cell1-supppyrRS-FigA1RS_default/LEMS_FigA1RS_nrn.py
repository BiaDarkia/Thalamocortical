'''
Neuron simulator export for:

Components:
    null (Type: notes)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    Input_8 (Type: pulseGenerator:  delay=0.4 (SI time) duration=0.3 (SI time) amplitude=7.5E-10 (SI current))
    Input_7 (Type: pulseGenerator:  delay=0.0 (SI time) duration=0.4 (SI time) amplitude=-4.0E-10 (SI current))
    FigA1RS (Type: networkWithTemperature:  temperature=279.45 (SI temperature))
    null (Type: notes)
    ar (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    ar__m00_25 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    cad (Type: fixedFactorConcentrationModelTraub:  restingConc=0.0 (SI concentration) beta=10.0 (SI per_time) phi=2.6E15 (SI rho_factor))
    null (Type: notes)
    cad__beta0_01__phi26000 (Type: fixedFactorConcentrationModelTraub:  restingConc=0.0 (SI concentration) beta=10.0 (SI per_time) phi=2.6E15 (SI rho_factor))
    null (Type: notes)
    cad__beta0_05__phi52000 (Type: fixedFactorConcentrationModelTraub:  restingConc=0.0 (SI concentration) beta=50.0 (SI per_time) phi=5.2E15 (SI rho_factor))
    null (Type: notes)
    cal (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    cat (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    k2 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    ka (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    kahp (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    kc (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    kdr (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    km (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    null (Type: include)
    L23PyrRS (Type: cell)
    null (Type: notes)
    naf__a0__b0__c0__d0__fastNa_shiftmin3_5 (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    nap (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    pas (Type: ionChannelPassive:  conductance=1.0E-11 (SI conductance))
    null (Type: notes)
    naf (Type: ionChannelHH:  conductance=1.0E-11 (SI conductance))
    Sim_FigA1RS (Type: Simulation:  length=0.8 (SI time) step=5.0E-6 (SI time))


    This NEURON file has been generated by org.neuroml.export (see https://github.com/NeuroML/org.neuroml.export)
         org.neuroml.export  v1.4.5
         org.neuroml.model   v1.4.5
         jLEMS               v0.9.8.5

'''

import neuron

import time
h = neuron.h
h.load_file("stdlib.hoc")

h.load_file("stdgui.hoc")

h("objref p")
h("p = new PythonObject()")

class NeuronSimulation():

    def __init__(self, tstop, dt):

        # Adding simulation Component(id=Sim_FigA1RS type=Simulation) of network/component: FigA1RS (Type: networkWithTemperature:  temperature=279.45 (SI temperature))

        # Temperature used for network: 279.45 K
        h.celsius = 279.45 - 273.15

        print("Population CGsuppyrRS contains 1 instance(s) of component: L23PyrRS of type: cell")

        print("Setting the default initial concentrations for ca (used in L23PyrRS) to 0.01 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.01")
        h("cao0_ca_ion = 2.0")

        print("Setting the default initial concentrations for ca (used in L23PyrRS) to 0.01 mM (internal), 2.0 mM (external)")
        h("cai0_ca_ion = 0.01")
        h("cao0_ca_ion = 2.0")

        h.load_file("L23PyrRS.hoc")
        a_CGsuppyrRS = []
        h("n_CGsuppyrRS = 1")
        h("objectvar a_CGsuppyrRS[n_CGsuppyrRS]")
        for i in range(int(h.n_CGsuppyrRS)):
            h("a_CGsuppyrRS[%i] = new L23PyrRS()"%i)
            h("access a_CGsuppyrRS[%i].comp_1"%i)

        h("a_CGsuppyrRS[0].position(41.628883000000002, 22.794032999999999, 74.077680000000001)")

        h("proc initialiseV_CGsuppyrRS() { for i = 0, n_CGsuppyrRS-1 { a_CGsuppyrRS[i].set_initial_v() } }")
        h("objref fih_CGsuppyrRS")
        h('{fih_CGsuppyrRS = new FInitializeHandler(0, "initialiseV_CGsuppyrRS()")}')

        h("proc initialiseIons_CGsuppyrRS() { for i = 0, n_CGsuppyrRS-1 { a_CGsuppyrRS[i].set_initial_ion_properties() } }")
        h("objref fih_ion_CGsuppyrRS")
        h('{fih_ion_CGsuppyrRS = new FInitializeHandler(1, "initialiseIons_CGsuppyrRS()")}')

        # Adding input: Component(id=0 type=input)

        h("objref Input_8_0")
        h("a_CGsuppyrRS[0].comp_1 { Input_8_0 = new Input_8(0.500000) } ")

        # Adding input: Component(id=0 type=input)

        h("objref Input_7_0")
        h("a_CGsuppyrRS[0].comp_1 { Input_7_0 = new Input_7(0.500000) } ")

        trec = h.Vector()
        trec.record(h._ref_t)

        h.tstop = tstop

        h.dt = dt

        h.steps_per_ms = 1/h.dt



        # File to save: time
        # Column: time
        h(' objectvar v_time ')
        h(' { v_time = new Vector() } ')
        h(' v_time.record(&t) ')
        h.v_time.resize((h.tstop * h.steps_per_ms) + 1)

        # File to save: Volts_file__CGsuppyrRS
        # Column: CGsuppyrRS/0/L23PyrRS/v
        h(' objectvar v_v_CGsuppyrRS_0_L23PyrRS_v_Volts_file__CGsuppyrRS ')
        h(' { v_v_CGsuppyrRS_0_L23PyrRS_v_Volts_file__CGsuppyrRS = new Vector() } ')
        h(' v_v_CGsuppyrRS_0_L23PyrRS_v_Volts_file__CGsuppyrRS.record(&a_CGsuppyrRS[0].comp_1.v(0.25)) ')
        h.v_v_CGsuppyrRS_0_L23PyrRS_v_Volts_file__CGsuppyrRS.resize((h.tstop * h.steps_per_ms) + 1)



    def run(self):

        sim_start = time.time()
        print("Running a simulation of %sms (dt = %sms)" % (h.tstop, h.dt))

        h.run()

        sim_end = time.time()
        sim_time = sim_end - sim_start
        print("Finished simulation in %f seconds (%f mins), saving results..."%(sim_time, sim_time/60.0))


        # File to save: time
        py_v_time = [ t/1000 for t in h.v_time.to_python() ]  # Convert to Python list for speed...

        f_time_f2 = open('time.dat', 'w')
        for i in range(int(h.tstop * h.steps_per_ms) + 1):
            f_time_f2.write('%f'% py_v_time[i])  # Save in SI units...+ '\n')
        f_time_f2.close()
        print("Saved data to: time.dat")

        # File to save: Volts_file__CGsuppyrRS
        py_v_v_CGsuppyrRS_0_L23PyrRS_v_Volts_file__CGsuppyrRS = [ float(x  / 1000.0) for x in h.v_v_CGsuppyrRS_0_L23PyrRS_v_Volts_file__CGsuppyrRS.to_python() ]  # Convert to Python list for speed, variable has dim: voltage

        f_Volts_file__CGsuppyrRS_f2 = open('Sim_FigA1RS.CGsuppyrRS.v.dat', 'w')
        for i in range(int(h.tstop * h.steps_per_ms) + 1):
            f_Volts_file__CGsuppyrRS_f2.write('%e\t'% py_v_time[i]  + '%e\t'%(py_v_v_CGsuppyrRS_0_L23PyrRS_v_Volts_file__CGsuppyrRS[i]) + '\n')
        f_Volts_file__CGsuppyrRS_f2.close()
        print("Saved data to: Sim_FigA1RS.CGsuppyrRS.v.dat")

        save_end = time.time()
        save_time = save_end - sim_end
        print("Finished saving results in %f seconds"%(save_time))

        print("Done")

        quit()
if __name__ == '__main__':

    ns = NeuronSimulation(tstop=800, dt=0.005)

    ns.run()

