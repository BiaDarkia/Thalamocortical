objref myplotinfo_
myplotinfo_ = new List()
strdef mytstr1
for i=1,15 {getstr(mytstr1) myplotinfo_.append(new String(mytstr1))}
dat/exp1/iv1/RecordA0.txt	-0.015	-0.11
dat/exp1/iv1/RecordA1.txt	-0.015	-0.065
dat/exp1/iv1/RecordA2.txt	-0.015	-0.015
dat/exp1/iv1/RecordA3.txt	-0.015	0.035
dat/exp1/iv1/RecordA4.txt	-0.015	0.082
dat/exp1/iv1/RecordA5.txt	-0.015	0.130
dat/exp1/iv1/RecordA6.txt	-0.015	0.180
dat/exp1/iv1/RecordA7.txt	-0.015	0.240
dat/exp1/iv1/RecordA8.txt	-0.015	0.270
dat/exp1/iv1/RecordA9.txt	-0.015	0.333
dat/exp1/iv1/RecordA10.txt	-0.015	0.385
dat/exp1/iv1/RecordA11.txt	-0.015	0.425
dat/exp1/iv1/RecordA12.txt	-0.015	0.480
dat/exp1/iv1/RecordA13.txt	-0.015	0.525
dat/exp1/iv1/RecordA14.txt	-0.015	0.575


// --- snippet to define graph if undefd
objectvar save_window_
objectvar scene_vector_[4]
if (graphList.count() < 1) {
		save_window_ = new Graph(0)
		save_window_.size(0,10,-80,40)
		scene_vector_[2] = save_window_
		{save_window_.view(0, -80, 10, 120, 539, 110, 533.76, 333.76)}
		graphList[0].append(save_window_)
		save_window_.save_name("graphList[0].")
		save_window_.addexpr("v", 1, 1, 0.8, 0.9, 2)
}
// ---

objref mvvec, mtvec, myg

proc runmycell() { local idx1, dt, maxt  localobj vf, tf, g
	strdef vstr
	a1 = 0  a2 = 0
	i = sscanf(myplotinfo_.object($1).s, "%s %lf %lf", vstr, &a1, &a2)
	print "myplotinfo_ :", vstr, " ", a1, " ", a2
	
	mvvecn = 0
//	sprint(vstr, "dat/RecordA%d.txt", 8)
	vf = new File()
	vf.ropen(vstr)
	mvvec = new Vector(50000)
	mvvecn = mvvec.scanf(vf)

	mtvec = new Vector(50000)
	maxt = 400 // in msec
	dt = maxt/mvvecn
	for idx1=0, mvvecn-1 {
		mtvec.x[idx1]=idx1*dt
	}

//	myg = new Graph()
	define_shape()
	myg = Graph[0]
	myg.erase_all
	myg.size(0,400,-100,100)
	mvvec.line(myg, mtvec, 4, 1)
	myg.exec_menu("Keep Lines")
	myg.exec_menu("Keep Lines")
	
	
	stim1 = nil
	stim2 = nil
	stim1 = new IClamp(.5)
	stim2 = new IClamp(.5)
	stim1.del = 20  stim2.del = 0
//	stim1.amp = 0.85  stim2.amp = -0.01
//	stim1.amp = 0.3  stim2.amp = 0
	stim1.amp = a2   stim2.amp = a1
	stim1.dur = 200  stim2.dur = 400 // 1e9
	
	tstop = 400

//  cell.presyn_comp = 57
	sprint(vstr, "cell.comp[%d].v(.5)", 57)
	myg.addvar(vstr, 2, 1) // color, brush
	
	run()
}
// would like to have a series of configurations which include
// parameters and the name of the file to record
// runmycell(0)


proc runaddcell() { localobj lcell
		// create a new cell added to the list cell_list_
		runcell_getnewcell(13)
		lcell = cell_list_.o[cell_list_.count()-1]
		
		// configure it as needed
		// ----------------- mech  extra1 extra2  lvl-0  lvl-1 2x( lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
		conductance_set_levels(lcell, 11, -2.50, 50.00,  0.400, 0.150,    0.150,  0.150, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010) // "naf2","fastNa_shift_naf2","ena"
		conductance_set_levels(lcell, 9,     -0,  -100,  0.400, 0.100,    0.150,  0.150,    -1,    -1,    -1,    -1,    -1,    -1) // "kdr_fs","","ek"
		conductance_set_levels(lcell, 6,     -0,  -100,  0.002, 0.030,    0.060,  0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004) // "ka","","ek"
		conductance_set_levels(lcell, 5,     -0,  -100, 0.0001,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "k2","","ek"
		conductance_set_levels(lcell, 12, -2.50, 50.00,     -1,1.5E-4,    1.5E-4,1.5E-4,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5) // "napf_spinstell","fastNa_shift_napf_spinstell","ena"
		conductance_set_levels(lcell, 8,     -0,  -100,     -1,  0.01,    0.020,  0.020, 0.020,    -1,    -1,    -1,    -1,    -1) // "kc_fast","","ek"
		conductance_set_levels(lcell, 10,    -0,  -100,    -1,3.75E-3,    7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3) // "km","","ek"
		conductance_set_levels(lcell, 7,     -0,  -100,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "kahp_slower","","ek"
		conductance_set_levels(lcell, 3,     -0,    -0,     -1,0.0005,    0.001,  0.001, 0.001, 0.001, 0.001, 0.006, 0.006, 0.006) // "cal","",""
		conductance_set_levels(lcell, 4,     -0,    -0,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "cat_a","",""
		conductance_set_levels(lcell, 1,    0.0,   -40,     -1,2.5E-4,    0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005) // "ar","m0_ar","erev_ar"
		conductance_set_levels(lcell, 13, -65.0,    -0,  0.001,2.0E-5,    4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5) // "pas","e_pas",""
		conductance_set_levels(lcell, 14,    -0,    -0,    0.9,   0.9,       1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8) // "cm","",""
		
		// ----------------- mech  extra1 extra2  lvl-0  lvl-1,     lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
		conductance_set_levels(lcell, 2, 260000,    -0,     -1,  0.02,      0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05) // "cad","","phi_cad"
		conductance_set_levels(lcell, 15,    -0,    -0,    100,   250,       250,   250,   250,   250,   250,   250,   250,   250) // "Ra","",""
		
		// addvar from the list entry 0
		sprint(tstr2,"cell_list_.o[%d].comp[57].v(.5)", (cell_list_.count()-1))
		myg.addvar(tstr2, 3, 1) // color, brush
		
		// add current clamp needed
		// add it
		stim1 = nil
		stim2 = nil
		stim1 = new IClamp(.5)
		stim2 = new IClamp(.5)
		stim1.del = 20  stim2.del = 0
		//	stim1.amp = 0.85  stim2.amp = -0.01
		//	stim1.amp = 0.3  stim2.amp = 0
		stim1.amp = a2   stim2.amp = a1
		stim1.dur = 200  stim2.dur = 400 // 1e9		
		tstop = 400
		
		// plot it with the color parameters passed?
		run()
		
		// question, how to select different kinds of cells?
		// question, how to choose color
}



objref rec_t, rec_v
objref data_fil
objref savv, savt
proc batchtest() { local i
		strdef tstra1, tstra2
		rec_t = new Vector(0)
		rec_v = new Vector(0)
		for i=0, $1 {
				rec_t.record(&t)
				rec_v.record(&cell.comp[1].v(0.5))
				
				double_dend_cond(i, $2)
				run()
				
				sprint(tstra1, "batchdata_t_%d.dat", i)
				savt = new File()
				savt.wopen(tstra1)
				rec_t.printf(savt)
				savt.close()
				
				sprint(tstra2, "batchdata_v_%d.dat", i)
				savv = new File()
				savv.wopen(tstra2)
				rec_v.printf(savv)
				savv.close()
		}
}

proc conductance_delta() { local delta_g 
		// $o1 - levels array
		// $o2 - mechs array
		delta_g = $3 // %change
		// loop over levels - forsec cell.level[0] print secname()
		for i=0, $o1.size()-1 {
				print "changing level:", $o1.x[i]
				forsec cell.level[$o1.x[i]] {
						// loop over mechanisms
						print "-section:", secname()
						for j=0, $o2.size()-1 {
								if ($o2.x[j] == 1 && ismembrane("ar")) { gbar_ar *= delta_g } 
								// if ($o2.x[j] == 2 && ismembrane("cad")) { gbar_cad *= delta_g } 
								if ($o2.x[j] == 3 && ismembrane("cal")) { gbar_cal *= delta_g } 
								if ($o2.x[j] == 4 && ismembrane("cat_a")) { gbar_cat_a *= delta_g } 
								if ($o2.x[j] == 5 && ismembrane("k2")) { gbar_k2 *= delta_g } 
								if ($o2.x[j] == 6 && ismembrane("ka")) { gbar_ka *= delta_g } 
								if ($o2.x[j] == 7 && ismembrane("kahp_slower")) { gbar_kahp_slower *= delta_g } 
								if ($o2.x[j] == 8 && ismembrane("kc_fast")) { gbar_kc_fast *= delta_g } 
								if ($o2.x[j] == 9 && ismembrane("kdr_fs")) { gbar_kdr_fs *= delta_g } 
								if ($o2.x[j] == 10 && ismembrane("km")) { gbar_km *= delta_g } 
								if ($o2.x[j] == 11 && ismembrane("naf2")) { gbar_naf2 *= delta_g } 
								if ($o2.x[j] == 12 && ismembrane("napf_spinstell")) { gbar_napf_spinstell *= delta_g } 
								// non standard naming
								if ($o2.x[j] == 13 && ismembrane("pas")) { g_pas *= delta_g }
								if ($o2.x[j] == 14 ) { cm *= delta_g }
						}
				}
		}
		// change conductance
}

proc conductance_delta_parm() { local amech   localobj mechs
		amech = $2
		mechs = new Vector(1)
		mechs.x[0] = amech
		conductance_delta($o1, mechs, $3)
}

proc conductance_set() { local value_g 
		// $o1 - levels array
		// $o2 - mechs array
		value_g = $3 // %change
		// loop over levels - forsec cell.level[0] print secname()
		for i=0, $o1.size()-1 {
				print "changing level:", $o1.x[i]
				forsec cell.level[$o1.x[i]] {
						// loop over mechanisms
						print "-section:", secname()
						for j=0, $o2.size()-1 {
								if ($o2.x[j] == 1 && ismembrane("ar")) { gbar_ar = value_g } 
								// if ($o2.x[j] == 2 && ismembrane("cad")) { gbar_cad = value_g } 
								if ($o2.x[j] == 3 && ismembrane("cal")) { gbar_cal = value_g } 
								if ($o2.x[j] == 4 && ismembrane("cat_a")) { gbar_cat_a = value_g } 
								if ($o2.x[j] == 5 && ismembrane("k2")) { gbar_k2 = value_g } 
								if ($o2.x[j] == 6 && ismembrane("ka")) { gbar_ka = value_g } 
								if ($o2.x[j] == 7 && ismembrane("kahp_slower")) { gbar_kahp_slower = value_g } 
								if ($o2.x[j] == 8 && ismembrane("kc_fast")) { gbar_kc_fast = value_g } 
								if ($o2.x[j] == 9 && ismembrane("kdr_fs")) { gbar_kdr_fs = value_g } 
								if ($o2.x[j] == 10 && ismembrane("km")) { gbar_km = value_g } 
								if ($o2.x[j] == 11 && ismembrane("naf2")) { gbar_naf2 = value_g } 
								if ($o2.x[j] == 12 && ismembrane("napf_spinstell")) { gbar_napf_spinstell = value_g } 
								// non standard naming
								if ($o2.x[j] == 13 && ismembrane("pas")) { g_pas = value_g }
								if ($o2.x[j] == 14 ) { cm = value_g }
						}
				}
		}
		// change conductance
}


proc conductance_set_levels() { local amech, extra1, extra2  localobj level_values
		amech = $2
		extra1 = $3
		extra2 = $4
		//		possible way to extend with extra dim
		//		strdef cmdstr1
		//		cmdstr1 = $s12
		//    later execute(cmdstr1) conditionally
		level_values = new Vector(0)
		level_values.append($5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
		for i=0, level_values.size()-1 {
				print "changing level:", i
				forsec $o1.level[i] {
						// loop over mechanisms
						print "-section:", secname()
						if ( level_values.x[i] > 0 ) {	// using negative gbar to indicate no mechanism present
								// NOTE: ek, etc.. is not set on no mechanism segments
								// --
								if (amech == 1 ) { insert ar
										gbar_ar = level_values.x[i] 
										m0_ar = extra1
										erev_ar = extra2
										// m0_ar = 0
										// erev_ar = -40
								} 
								if (amech == 2 ) { insert cad
										beta_cad = level_values.x[i] 
										phi_cad = extra1
										// phi_cad = 260000
								} 
								if (amech == 3 ) { insert cal
										gbar_cal = level_values.x[i] 
								} 
								if (amech == 4 ) { insert cat_a
								gbar_cat_a = level_values.x[i] } 
								if (amech == 5 ) { insert k2
										gbar_k2 = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 6 ) { insert ka
										gbar_ka = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 7 ) { insert kahp_slower										
										gbar_kahp_slower = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 8 ) { insert kc_fast	
										gbar_kc_fast = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 9 ) { insert kdr_fs
										gbar_kdr_fs = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 10 ) { insert km
										gbar_km = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 11 ) { insert naf2
										gbar_naf2 = level_values.x[i]
										fastNa_shift_naf2 = extra1
										ena = extra2
										// fastNa_shift_naf2 = -2.5
										// ena = 50
								} 
								if (amech == 12 ) { insert napf_spinstell
										gbar_napf_spinstell = level_values.x[i]
										extra1=-2.5
										ena = extra2
										// fastNa_shift_napf_spinstell = -2.5
										// ena = 50
								} 
								// non standard naming
								if (amech == 13 ) { 
										e_pas = extra1
										g_pas = level_values.x[i] 
								}
								if (amech == 14 ) { 
										cm = level_values.x[i] 
								}
								if (amech == 15 ) { 
										Ra = level_values.x[i] 
								}
								if (amech == 16 ) { // other settings
									//	vca = 125.      // - hardcoded in the mod files
									//	e_gaba_a = -75  // - ? can't find connection/use
								}
						}
				}
		}
		// change conductance
}

proc conductance_set_parm() { local amech   localobj mechs
		amech = $2
		mechs = new Vector(1)
		mechs.x[0] = amech
		conductance_set($o1, mechs, $3)
}

proc export_text() { localobj mview_export
		mview_export = new ModelView(0)
		sprint(tstr2, "ss_mview_%d.txt", $1)
		mview_export.textp(tstr2)
		mview_export.destroy()
		// objref m		
}


// load_file("myplot.hoc")
// FORCE LOAD
// load_file(1,"myplot.hoc")



/*

runmycell()
objref dend_lvls
dend_lvls = new Vector(0)
dend_lvls.append(2,3,4,5,6,7,8,9) // dendrites
objref all_lvls
all_lvls = new Vector(0)
all_lvls.append(0,1,2,3,4,5,6,7,8,9)
objref n_pas
n_pas = new Vector(0)
n_pas.append(13)
conductance_delta(dend_lvls, n_pas, 2)
objref n_cm
n_cm = new Vector(0)
n_cm.append(14)
conductance_delta(dend_lvls, n_cm, 2)
objref my_mechs
my_mechs = new Vector(0)
my_mechs.append(1,2,3,4,5,6,7,8,9,10,11,12) // all actual mechs
conductance_delta(dend_lvls, my_mechs, 0.8)

*/
// run()





