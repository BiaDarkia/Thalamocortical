objref myplotinfo_
myplotinfo_ = new List()
strdef mytstr1
for i=1,15 {getstr(mytstr1) myplotinfo_.append(new String(mytstr1))}
dat/exp1/iv1/RecordA0.txt	-0.015	-0.11
dat/exp1/iv1/RecordA1.txt	-0.015	-0.065
dat/exp1/iv1/RecordA2.txt	-0.015	-0.015
dat/exp1/iv1/RecordA3.txt	-0.015	0.035
dat/exp1/iv1/RecordA4.txt	-0.015	0.082
dat/exp1/iv1/RecordA5.txt	-0.015	0.130
dat/exp1/iv1/RecordA6.txt	-0.015	0.180
dat/exp1/iv1/RecordA7.txt	-0.015	0.240
dat/exp1/iv1/RecordA8.txt	-0.015	0.270
dat/exp1/iv1/RecordA9.txt	-0.015	0.333
dat/exp1/iv1/RecordA10.txt	-0.015	0.385
dat/exp1/iv1/RecordA11.txt	-0.015	0.425
dat/exp1/iv1/RecordA12.txt	-0.015	0.480
dat/exp1/iv1/RecordA13.txt	-0.015	0.525
dat/exp1/iv1/RecordA14.txt	-0.015	0.575


// --- snippet to define graphs if undefd
objref g0, g1
if (graphList.count() < 1) {
		load_file("2graph_wip.ses")
		g0 = Graph[0]
		g1 = Graph[1]
		
		// ---- main sum memcur
		// g1.addexpr("cell.comp[2].ina(0.5)+cell.comp[2].ik(0.5)+cell.comp[2].i_cap",7,1)
			
		// ---- all memcur
		g1.addexpr("cell.comp[2].i_pas(0.5)",1,1)
		g1.addexpr("cell.comp[2].i_cap",2,1)
		g1.addexpr("cell.comp[2].ik(0.5)",3,1)
		g1.addexpr("-cell.comp[2].ina(0.5)",4,1)
		g1.addexpr("cell.comp[2].i_ar",5,1)
		g1.addexpr("cell.comp[2].ica",6,1)
		// ---- end memcur
		
		
		// ---- ik parts
		// ---- sum ik
		// g1.addexpr("cell.comp[2].ik_k2(0.5)",1,1) // ?
		// g1.addexpr("cell.comp[2].ik_ka(0.5)",2,1) // ?
		// g1.addexpr("cell.comp[2].ik_kahp_slower(0.5)",3,1) // ?
		// g1.addexpr("cell.comp[2].ik_kc_fast(0.5)",4,1) // ?
		// g1.addexpr("cell.comp[2].ik_kdr_fs(0.5)",5,1) // ?
		// g1.addexpr("cell.comp[2].ik_km(0.5)",6,1) // ?
		// ---- ik parts end
		
		// ---- na parts
		// ---- sum na 
		// g1.addexpr("cell.comp[2].ina(0.5)",1,1) // ?
		// g1.addexpr("cell.comp[2].ina_naf2(0.5)",2,1) // ?
		// g1.addexpr("cell.comp[2].ina_napf_spinstell(0.5)",3,1) // ?
		// ---- na parts end
		
		
		// g1.addexpr("cell.comp[1].ik_k2(0.5)",4,1) // no contrib
		// g1.addexpr("cell.comp[1].ik_k2(0.5)+cell.comp[1].ik_ka(0.5)",5,1) // 10% contrib
		// g1.addexpr("cell.comp[1].ik_k2(0.5)+cell.comp[1].ik_ka(0.5)+cell.comp[1].ik_kahp_slower(0.5)",6,1) // 1% contrib
		// g1.addexpr("cell.comp[1].ik_k2(0.5)+cell.comp[1].ik_ka(0.5)+cell.comp[1].ik_kahp_slower(0.5)+cell.comp[1].ik_kc_fast(0.5)",7,1) // 10% contrib
		// g1.addexpr("cell.comp[1].ik_k2(0.5)+cell.comp[1].ik_ka(0.5)+cell.comp[1].ik_kahp_slower(0.5)+cell.comp[1].ik_kc_fast(0.5)+cell.comp[1].ik_kdr_fs(0.5)",8,1)// high
		// g1.addexpr("cell.comp[1].ik_k2(0.5)+cell.comp[1].ik_ka(0.5)+cell.comp[1].ik_kahp_slower(0.5)+cell.comp[1].ik_kc_fast(0.5)+cell.comp[1].ik_kdr_fs(0.5)+cell.comp[1].ik_km(0.5)",9,1)// no?
		// ---- ik end
		// could be integrated over a spike and normalised to get a measure of the mechanism contribution
		
		
		// traub_connect(this,  1,  54,   0.0610434081, 0)
		// traub_connect(this,  1,  2,    0.0698996835, 1)
		// traub_connect(this,  1,  15,   0.0698996835, 1)
		// traub_connect(this,  1,  28,   0.0698996835, 1)
		// traub_connect(this,  1,  41,   0.0698996835, 1)

}
// ---

// for each node in current section that has x>0
//   report axial current that enters this node from its parent
proc seciax() { local vp, vthis
		print secname()
		for (x) {
				if (x==0) {
						vp = v(x)
				} else {
						vthis = v(x)
						print x, (vp-vthis)/ri(x)
						vp = vthis // prepare to deal with next node
				}
		}
}
// forall seciax()
//
// forall { print secname()," ",diam," ",L," ",x3d(0.5)," ",y3d(0.5)," ",z3d(0.5) }
// forall { for (x) { print x3d(x)," " } print "a" }


objref mvvec, mtvec, myg

proc runmycell() { local idx1, deltat, maxt  localobj vf, tf, g
	strdef vstr
	a1 = 0  a2 = 0
	i = sscanf(myplotinfo_.object($1).s, "%s %lf %lf", vstr, &a1, &a2)
	print "myplotinfo_ :", vstr, " ", a1, " ", a2
	
	mvvecn = 0
//	sprint(vstr, "dat/RecordA%d.txt", 8)
	vf = new File()
	vf.ropen(vstr)
	mvvec = new Vector(50000)
	mvvecn = mvvec.scanf(vf)

	mtvec = new Vector(50000)
	maxt = 400 // in msec
	deltat = maxt/mvvecn
	for idx1=0, mvvecn-1 {
		mtvec.x[idx1]=idx1*deltat
	}

//	myg = new Graph()
	define_shape()
	myg = Graph[0]
	myg.erase_all
//	myg.size(0,400,-100,100)
	mvvec.line(myg, mtvec, 4, 1)
	myg.exec_menu("Keep Lines")
	myg.exec_menu("Keep Lines")
	
	
	stim1 = nil
	stim2 = nil
	stim1 = new IClamp(.5)
	stim2 = new IClamp(.5)
	stim1.del = 20  stim2.del = 0
	stim1.amp = a2   stim2.amp = a1
	stim1.dur = 200  stim2.dur = 400 // 1e9
	
	tstop = 400

	sprint(vstr, "cell.comp[%d].v(.5)", 1) //  cell.presyn_comp = 57
	myg.addvar(vstr, 2, 1) // color, brush
	
	run()
}
objref sfunc
sfunc = new StringFunctions()

objref rec_t, rec_v
objref data_fil
objref savv, savt
proc runmycelltodisk() { local idx1, deltat, maxt  localobj vf, tf, g
		strdef tstra1, tstra2
		rec_t = new Vector(0)
		rec_v = new Vector(0)
		strdef vstr
		
		a1 = 0  a2 = 0	
		stim1 = nil stim2 = nil
		stim1 = new IClamp(.5)
		stim2 = new IClamp(.5)
		stim1.del = 20  stim2.del = 0
		stim1.amp = a2   stim2.amp = a1
		stim1.dur = 200  stim2.dur = 400 // 1e9		
		tstop = 400
		
		rec_t.record(&t)
		// sprint(vstr, "cell.comp[%d].v(.5)", 57) //  cell.presyn_comp = 57
		rec_v.record(&cell.comp[57].v(0.5))
		run()
		
		strdef tstamp
		system("date '+%Y-%m-%d_%H%M-%S'", tstamp)
		sfunc.left(tstamp,18)

		sprint(tstra1, "batchdata_t_%s.dat", tstamp)
		savt = new File()
		savt.wopen(tstra1)
		rec_t.printf(savt)
		savt.close()
		
		sprint(tstra2, "batchdata_v_%s.dat", tstamp)
		savv = new File()
		savv.wopen(tstra2)
		rec_v.printf(savv)
		savv.close()
}


objref rec_t, rec_v
objref data_fil
objref savv, savt
proc batchtest() { local i
		strdef tstra1, tstra2
		rec_t = new Vector(0)
		rec_v = new Vector(0)
		for i=0, $1 {
				rec_t.record(&t)
				rec_v.record(&cell.comp[1].v(0.5))
				
				double_dend_cond(i, $2)
				run()
				
				sprint(tstra1, "batchdata_t_%d.dat", i)
				savt = new File()
				savt.wopen(tstra1)
				rec_t.printf(savt)
				savt.close()
				
				sprint(tstra2, "batchdata_v_%d.dat", i)
				savv = new File()
				savv.wopen(tstra2)
				rec_v.printf(savv)
				savv.close()
		}
}

proc conductance_delta() { local delta_g 
		// $o1 - levels array
		// $o2 - mechs array
		delta_g = $3 // %change
		// loop over levels - forsec cell.level[0] print secname()
		for i=0, $o1.size()-1 {
				print "changing level:", $o1.x[i]
				forsec cell.level[$o1.x[i]] {
						// loop over mechanisms
						print "-section:", secname()
						for j=0, $o2.size()-1 {
								if ($o2.x[j] == 1 && ismembrane("ar")) { gbar_ar *= delta_g } 
								// if ($o2.x[j] == 2 && ismembrane("cad")) { gbar_cad *= delta_g } 
								if ($o2.x[j] == 3 && ismembrane("cal")) { gbar_cal *= delta_g } 
								if ($o2.x[j] == 4 && ismembrane("cat_a")) { gbar_cat_a *= delta_g } 
								if ($o2.x[j] == 5 && ismembrane("k2")) { gbar_k2 *= delta_g } 
								if ($o2.x[j] == 6 && ismembrane("ka")) { gbar_ka *= delta_g } 
								if ($o2.x[j] == 7 && ismembrane("kahp_slower")) { gbar_kahp_slower *= delta_g } 
								if ($o2.x[j] == 8 && ismembrane("kc_fast")) { gbar_kc_fast *= delta_g } 
								if ($o2.x[j] == 9 && ismembrane("kdr_fs")) { gbar_kdr_fs *= delta_g } 
								if ($o2.x[j] == 10 && ismembrane("km")) { gbar_km *= delta_g } 
								if ($o2.x[j] == 11 && ismembrane("naf2")) { gbar_naf2 *= delta_g } 
								if ($o2.x[j] == 12 && ismembrane("napf_spinstell")) { gbar_napf_spinstell *= delta_g } 
								// non standard naming
								if ($o2.x[j] == 13 && ismembrane("pas")) { g_pas *= delta_g }
								if ($o2.x[j] == 14 ) { cm *= delta_g }
						}
				}
		}
		// change conductance
}

proc conductance_delta_parm() { local amech   localobj mechs
		amech = $2
		mechs = new Vector(1)
		mechs.x[0] = amech
		conductance_delta($o1, mechs, $3)
}

proc conductance_set() { local value_g 
		// $o1 - levels array
		// $o2 - mechs array
		value_g = $3 // %change
		// loop over levels - forsec cell.level[0] print secname()
		for i=0, $o1.size()-1 {
				print "changing level:", $o1.x[i]
				forsec cell.level[$o1.x[i]] {
						// loop over mechanisms
						print "-section:", secname()
						for j=0, $o2.size()-1 {
								if ($o2.x[j] == 1 && ismembrane("ar")) { gbar_ar = value_g } 
								// if ($o2.x[j] == 2 && ismembrane("cad")) { gbar_cad = value_g } 
								if ($o2.x[j] == 3 && ismembrane("cal")) { gbar_cal = value_g } 
								if ($o2.x[j] == 4 && ismembrane("cat_a")) { gbar_cat_a = value_g } 
								if ($o2.x[j] == 5 && ismembrane("k2")) { gbar_k2 = value_g } 
								if ($o2.x[j] == 6 && ismembrane("ka")) { gbar_ka = value_g } 
								if ($o2.x[j] == 7 && ismembrane("kahp_slower")) { gbar_kahp_slower = value_g } 
								if ($o2.x[j] == 8 && ismembrane("kc_fast")) { gbar_kc_fast = value_g } 
								if ($o2.x[j] == 9 && ismembrane("kdr_fs")) { gbar_kdr_fs = value_g } 
								if ($o2.x[j] == 10 && ismembrane("km")) { gbar_km = value_g } 
								if ($o2.x[j] == 11 && ismembrane("naf2")) { gbar_naf2 = value_g } 
								if ($o2.x[j] == 12 && ismembrane("napf_spinstell")) { gbar_napf_spinstell = value_g } 
								// non standard naming
								if ($o2.x[j] == 13 && ismembrane("pas")) { g_pas = value_g }
								if ($o2.x[j] == 14 ) { cm = value_g }
						}
				}
		}
		// change conductance
}


proc conductance_set_levels() { local amech, chg, extra1, extra2  localobj level_values
		amech = $2
		chg = $3
		extra1 = $4
		extra2 = $5
		//		possible way to extend with extra dim
		//		strdef cmdstr1
		//		cmdstr1 = $s12
		//    later execute(cmdstr1) conditionally
		level_values = new Vector(0)
		level_values.append($6*chg, $7*chg, $8*chg, $9*chg, $10*chg, $11*chg, $12*chg, $13*chg, $14*chg, $15*chg)
		for i=0, level_values.size()-1 {
				// print "changing level:", i
				forsec $o1.level[i] {
						// loop over mechanisms
						// print "-section:", secname()
						if ( level_values.x[i] > 0 ) {	// using negative gbar to indicate no mechanism present
								// NOTE: ek, etc.. is not set on no mechanism segments
								// --
								if (amech == 1 ) { insert ar
										gbar_ar = level_values.x[i] 
										m0_ar = extra1
										erev_ar = extra2
										// m0_ar = 0
										// erev_ar = -40
								} 
								if (amech == 2 ) { insert cad
										beta_cad = level_values.x[i] 
										phi_cad = extra1
										// phi_cad = 260000
								} 
								if (amech == 3 ) { insert cal
										gbar_cal = level_values.x[i] 
								} 
								if (amech == 4 ) { insert cat_a
								gbar_cat_a = level_values.x[i] } 
								if (amech == 5 ) { insert k2
										gbar_k2 = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 6 ) { insert ka
										gbar_ka = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 7 ) { insert kahp_slower										
										gbar_kahp_slower = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 8 ) { insert kc_fast	
										gbar_kc_fast = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 9 ) { insert kdr_fs
										gbar_kdr_fs = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 10 ) { insert km
										gbar_km = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 11 ) { insert naf2
										gbar_naf2 = level_values.x[i]
										fastNa_shift_naf2 = extra1
										ena = extra2
										// fastNa_shift_naf2 = -2.5
										// ena = 50
								} 
								if (amech == 12 ) { insert napf_spinstell
										gbar_napf_spinstell = level_values.x[i]
										extra1=-2.5
										ena = extra2
										// fastNa_shift_napf_spinstell = -2.5
										// ena = 50
								} 
								// non standard naming
								if (amech == 13 ) { 
										e_pas = extra2
										g_pas = level_values.x[i] 
								}
								if (amech == 14 ) { 
										cm = level_values.x[i] 
								}
								if (amech == 15 ) { 
										Ra = level_values.x[i] 
								}
								if (amech == 16 ) { // other settings
									//	vca = 125.      // - hardcoded in the mod files
									//	e_gaba_a = -75  // - ? can't find connection/use
								}
						}
				}
		}
		// change conductance
}

// ---- conductance set levels sum
proc conductance_set_levels_sum() { local amech, chg, extra1, extra2  localobj level_values
		amech = $2
		chg = $3
		extra1 = $4
		extra2 = $5
		//		possible way to extend with extra dim
		//		strdef cmdstr1
		//		cmdstr1 = $s12
		//    later execute(cmdstr1) condgitionally
		level_values = new Vector(0)
		level_values.append($6+chg, $7+chg, $8+chg, $9+chg, $10+chg, $11+chg, $12+chg, $13+chg, $14+chg, $15+chg)
		for i=0, level_values.size()-1 {
				// print "changing level:", i
				forsec $o1.level[i] {
						// loop over mechanisms
						// print "-section:", secname()
						if ( level_values.x[i] > 0 ) {	// using negative gbar to indicate no mechanism present
								// NOTE: ek, etc.. is not set on no mechanism segments
								// --
								if (amech == 1 ) { insert ar
										gbar_ar = level_values.x[i] 
										m0_ar = extra1
										erev_ar = extra2
										// m0_ar = 0
										// erev_ar = -40
								} 
								if (amech == 2 ) { insert cad
										beta_cad = level_values.x[i] 
										phi_cad = extra1
										// phi_cad = 260000
								} 
								if (amech == 3 ) { insert cal
										gbar_cal = level_values.x[i] 
								} 
								if (amech == 4 ) { insert cat_a
								gbar_cat_a = level_values.x[i] } 
								if (amech == 5 ) { insert k2
										gbar_k2 = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 6 ) { insert ka
										gbar_ka = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 7 ) { insert kahp_slower										
										gbar_kahp_slower = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 8 ) { insert kc_fast	
										gbar_kc_fast = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 9 ) { insert kdr_fs
										gbar_kdr_fs = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 10 ) { insert km
										gbar_km = level_values.x[i] 
										ek = extra2
										// ek = -100
								} 
								if (amech == 11 ) { insert naf2
										gbar_naf2 = level_values.x[i]
										fastNa_shift_naf2 = extra1
										ena = extra2
										// fastNa_shift_naf2 = -2.5
										// ena = 50
								} 
								if (amech == 12 ) { insert napf_spinstell
										gbar_napf_spinstell = level_values.x[i]
										extra1=-2.5
										ena = extra2
										// fastNa_shift_napf_spinstell = -2.5
										// ena = 50
								} 
								// non standard naming
								if (amech == 13 ) { 
										e_pas = extra2
										g_pas = level_values.x[i] 
								}
								if (amech == 14 ) { 
										cm = level_values.x[i] 
								}
								if (amech == 15 ) { 
										Ra = level_values.x[i] 
								}
								if (amech == 16 ) { // other settings
									//	vca = 125.      // - hardcoded in the mod files
									//	e_gaba_a = -75  // - ? can't find connection/use
								}
						}
				}
		}
		// change conductance
}


proc conductance_set_parm() { local amech   localobj mechs
		amech = $2
		mechs = new Vector(1)
		mechs.x[0] = amech
		conductance_set($o1, mechs, $3)
}

proc export_text() { localobj mview_export
		mview_export = new ModelView(0)
		sprint(tstr2, "ss_mview_%d.txt", $1)
		mview_export.textp(tstr2)
		mview_export.destroy()
		// objref m		
}


// load_file("myplot.hoc")
// FORCE LOAD
// load_file(1,"myplot.hoc")



/*

runmycell()
objref dend_lvls
dend_lvls = new Vector(0)
dend_lvls.append(2,3,4,5,6,7,8,9) // dendrites
objref all_lvls
all_lvls = new Vector(0)
all_lvls.append(0,1,2,3,4,5,6,7,8,9)
objref n_pas
n_pas = new Vector(0)
n_pas.append(13)
conductance_delta(dend_lvls, n_pas, 2)
objref n_cm
n_cm = new Vector(0)
n_cm.append(14)
conductance_delta(dend_lvls, n_cm, 2)
objref my_mechs
my_mechs = new Vector(0)
my_mechs.append(1,2,3,4,5,6,7,8,9,10,11,12) // all actual mechs
conductance_delta(dend_lvls, my_mechs, 0.8)

*/
// run()


objref qr
qr = new Vector(0)
qr.append(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
highindex = 1
lowindex = mcell_ran4_init()


objref rec_t, rec_v
objref data_fil
objref savv, savt, savs, savi

// g1.addexpr("cell.comp[2].i_pas(0.5)",1,1)
// g1.addexpr("cell.comp[2].i_cap",2,1)
// g1.addexpr("cell.comp[2].ik(0.5)",3,1)
// g1.addexpr("-cell.comp[2].ina(0.5)",4,1)
// g1.addexpr("cell.comp[2].i_ar",5,1)
// g1.addexpr("cell.comp[2].ica",6,1)
objref ripas,ricap,rik,rina,riar,rica

proc batch_search() { local i
		strdef tstra1, tstra2, tstra3, tstra4
		rec_t = new Vector(0)
		rec_v = new Vector(0)
		
		ripas = new Vector(0)
		ricap = new Vector(0)	
		rik = new Vector(0)		
		rina = new Vector(0)		
		riar = new Vector(0)		
		rica = new Vector(0)
		
		for bati=0, $1 {
				print "running ",bati
				rec_t.record(&t)
				rec_v.record(&cell.comp[2].v(0.5))
				
				ripas.record(&cell.comp[2].i_pas(0.5))
				ricap.record(&cell.comp[2].i_cap)
				rik.record(&cell.comp[2].ik(0.5))
				rina.record(&cell.comp[2].ina(0.5))
				riar.record(&cell.comp[2].i_ar)
				rica.record(&cell.comp[2].ica)
				// iterate select candidate etc..
				
				for i=0, qr.size()-1 {
						rndn = mcell_ran4(&highindex)
						if (rndn >2/3) {
								// increase
								qr.x[i] = qr.x[i]*1.001
						} else if (rndn >1/3) {
								// do nothing
						} else {
								// decrease
								qr.x[i] = qr.x[i]*0.999				
						}
				}
				
				_ek = -100*qr.x[0]
				_ena = 50*qr.x[1]
				_ear = -40*qr.x[2]
				_epas = -65*qr.x[3]
				// ----------------------- mech chg extra1 extra2  lvl-0  lvl-1 2x( lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
				conductance_set_levels(cell, 11, qr.x[04], -2.50*qr.x[19],  _ena,  0.400, 0.150,    0.150,  0.150, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010) // "naf2","fastNa_shift_naf2","ena"
				conductance_set_levels(cell, 9,  qr.x[05],             -0,   _ek,  0.400, 0.100,    0.150,  0.150,    -1,    -1,    -1,    -1,    -1,    -1) // "kdr_fs","","ek"
				conductance_set_levels(cell, 6,  qr.x[06],             -0,   _ek,  0.002, 0.030,    0.060,  0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004) // "ka","","ek"
				conductance_set_levels(cell, 5,  qr.x[07],             -0,   _ek, 0.0001,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "k2","","ek"
				//conductance_set_levels(cell, 12, qr.x[08], -2.50,  _ena,  -1,1.5E-4,       1.5E-4,1.5E-4,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5) // "napf_spinstell","fastNa_shift_napf_spinstell","ena"
				conductance_set_levels(cell, 12, qr.x[08], -2.50*qr.x[20],  _ena,   4E-4,1.5E-4,    1.5E-4,1.5E-4,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5) // "napf_spinstell","fastNa_shift_napf_spinstell","ena"
				conductance_set_levels(cell, 8,  qr.x[09],             -0,   _ek,     -1,  0.01,    0.020,  0.020, 0.020,    -1,    -1,    -1,    -1,    -1) // "kc_fast","","ek"
				conductance_set_levels(cell, 10, qr.x[10],             -0,   _ek,    -1,3.75E-3,    7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3) // "km","","ek"
				conductance_set_levels(cell, 7,  qr.x[11],             -0,   _ek,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "kahp_slower","","ek"
				conductance_set_levels(cell, 3,  qr.x[12],             -0,    -0,     -1,0.0005,    0.001,  0.001, 0.001, 0.001, 0.001, 0.006, 0.006, 0.006) // "cal","",""
				conductance_set_levels(cell, 4,  qr.x[13],             -0,    -0,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "cat_a","",""
				conductance_set_levels(cell, 1,  qr.x[14],            0.0,  _ear,     -1,2.5E-4,    0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005) // "ar","m0_ar","erev_ar"
				conductance_set_levels(cell, 13, qr.x[15],             -0, _epas,  0.001,2.0E-5,    4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5) // "pas","e_pas",""
				conductance_set_levels(cell, 14, qr.x[16],   -0,    -0,    0.9,   0.9,       1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8) // "cm","",""
				
				// ----------------------- mech chg extra1 extra2  lvl-0  lvl-1   ( lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
				conductance_set_levels(cell, 2,  qr.x[17],260000*qr.x[21],    -0,     -1,  0.02,      0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05) // "beta_cad","","phi_cad"
				conductance_set_levels(cell, 15, qr.x[18],             -0,    -0,    100,   250,       250,   250,   250,   250,   250,   250,   250,   250) // "Ra","",""
				
				
				run()
				
				sprint(tstra1, "batchdata/batchdata_t_%d.dat", bati+10000)
				savt = new File()
				savt.wopen(tstra1)
				rec_t.printf(savt)
				savt.close()
				
				sprint(tstra2, "batchdata/batchdata_v_%d.dat", bati+10000)
				savv = new File()
				savv.wopen(tstra2)
				rec_v.printf(savv)
				savv.close()
				
				sprint(tstra3, "batchdata/batchdata_s_%d.dat", bati+10000)
				savs = new File()
				savs.wopen(tstra3)
				qr.printf(savs)
				savs.close()				
				
				//---
				sprint(tstra4, "batchdata/batchdata_ipas_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				ripas.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_icap_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				ricap.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_ik_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				rik.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_ina_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				rina.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_iar_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				riar.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_ica_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				rica.printf(savi) // c
				savi.close()				
				
		}
		
}

// -------------------------------- revised batch run


objref qr, qval
qr = new Vector(0)
qval = new Vector(0)
qr.append  (1 ,1 ,1 ,1 , 1   ,1   ,1   ,1     ,1     ,1   ,1     ,1     ,1    ,1     ,1     ,1     ,1   ,1    ,1   ,1,1 ,1)
//qval.append(5 ,5 ,5 ,20, 0.15,0.15,0.06,0.0002,1.5E-4,0.02,7.5E-3,0.0002,0.001,0.0002,0.0005,4.0E-5,0.5 ,0.05 ,100 ,1,1 ,10000)
  qval.append(5 ,5 ,5 ,20, 0.5 ,0.5 ,0.5 ,0.005 ,5E-4  ,0.5 ,5E-2  ,0.005 ,0.05 ,0.005 ,0.005 ,5.0E-4,5   ,0.5  ,100 ,5,5 ,100000)
highindex = 1
lowindex = mcell_ran4_init()


objref rec_t, rec_v
objref data_fil
objref savv, savt, savs, savi

// g1.addexpr("cell.comp[2].i_pas(0.5)",1,1)
// g1.addexpr("cell.comp[2].i_cap",2,1)
// g1.addexpr("cell.comp[2].ik(0.5)",3,1)
// g1.addexpr("-cell.comp[2].ina(0.5)",4,1)
// g1.addexpr("cell.comp[2].i_ar",5,1)
// g1.addexpr("cell.comp[2].ica",6,1)
objref ripas,ricap,rik,rina,riar,rica

proc batch_search_2() { local i
		strdef tstra1, tstra2, tstra3, tstra4
		rec_t = new Vector(0)
		rec_v = new Vector(0)
		
		ripas = new Vector(0)
		ricap = new Vector(0)	
		rik = new Vector(0)		
		rina = new Vector(0)		
		riar = new Vector(0)		
		rica = new Vector(0)
		
		for bati=0, $1 {
				print "running ",bati
				rec_t.record(&t)
				rec_v.record(&cell.comp[2].v(0.5))
				
				ripas.record(&cell.comp[2].i_pas(0.5))
				ricap.record(&cell.comp[2].i_cap)
				rik.record(&cell.comp[2].ik(0.5))
				rina.record(&cell.comp[2].ina(0.5))
				riar.record(&cell.comp[2].i_ar)
				rica.record(&cell.comp[2].ica)
				// iterate select candidate etc..
				
				for i=0, qr.size()-1 {
						rndn = mcell_ran4(&highindex)
						if (rndn >2/3) {
								// increase
								qr.x[i] = qr.x[i]*1.001
						} else if (rndn >1/3) {
								// do nothing
						} else {
								// decrease
								qr.x[i] = qr.x[i]*0.999				
						}
				}
				
				_ek =   -100+(qr.x[0]-1)*qval.x[0]
				_ena =    50+(qr.x[1]-1)*qval.x[1]
				_ear =   -40+(qr.x[2]-1)*qval.x[2]
				_epas =  -65+(qr.x[3]-1)*qval.x[3]
				// ----------------------- mech chg extra1 extra2  lvl-0  lvl-1 2x( lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
				conductance_set_levels_sum(cell, 11, (qr.x[04]-1)*qval.x[04], -2.50+(qr.x[19]-1)*qval.x[19],  _ena,  0.400, 0.150,    0.150,  0.150, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010) // "naf2","fastNa_shift_naf2","ena"
				conductance_set_levels_sum(cell, 9,  (qr.x[05]-1)*qval.x[05],             -0,   _ek,  0.400, 0.100,    0.150,  0.150,    -1,    -1,    -1,    -1,    -1,    -1) // "kdr_fs","","ek"
				conductance_set_levels_sum(cell, 6,  (qr.x[06]-1)*qval.x[06],             -0,   _ek,  0.002, 0.030,    0.060,  0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004) // "ka","","ek"
				conductance_set_levels_sum(cell, 5,  (qr.x[07]-1)*qval.x[07],             -0,   _ek, 0.0001,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "k2","","ek"
				//conductance_set_levels_sum(cell, 12, (qr.x[08]-1)*qval.x[08], -2.50,  _ena,  -1,1.5E-4,       1.5E-4,1.5E-4,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5) // "napf_spinstell","fastNa_shift_napf_spinstell","ena"
				conductance_set_levels_sum(cell, 12, (qr.x[08]-1)*qval.x[08], -2.50+(qr.x[20]-1)*qval.x[20],  _ena,   4E-4,1.5E-4,    1.5E-4,1.5E-4,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5) // "napf_spinstell","fastNa_shift_napf_spinstell","ena"
				conductance_set_levels_sum(cell, 8,  (qr.x[09]-1)*qval.x[09],             -0,   _ek,     -1,  0.01,    0.020,  0.020, 0.020,    -1,    -1,    -1,    -1,    -1) // "kc_fast","","ek"
				conductance_set_levels_sum(cell, 10, (qr.x[10]-1)*qval.x[10],             -0,   _ek,    -1,3.75E-3,    7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3) // "km","","ek"
				conductance_set_levels_sum(cell, 7,  (qr.x[11]-1)*qval.x[11],             -0,   _ek,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "kahp_slower","","ek"
				conductance_set_levels_sum(cell, 3,  (qr.x[12]-1)*qval.x[12],             -0,    -0,     -1,0.0005,    0.001,  0.001, 0.001, 0.001, 0.001, 0.006, 0.006, 0.006) // "cal","",""
				conductance_set_levels_sum(cell, 4,  (qr.x[13]-1)*qval.x[13],             -0,    -0,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "cat_a","",""
				conductance_set_levels_sum(cell, 1,  (qr.x[14]-1)*qval.x[14],            0.0,  _ear,     -1,2.5E-4,    0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005) // "ar","m0_ar","erev_ar"
				conductance_set_levels_sum(cell, 13, (qr.x[15]-1)*qval.x[15],             -0, _epas,  0.001,2.0E-5,    4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5) // "pas","e_pas",""
				conductance_set_levels_sum(cell, 14, (qr.x[16]-1)*qval.x[16],   -0,    -0,    0.9,   0.9,       1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8) // "cm","",""
				
				// ----------------------- mech chg extra1 extra2  lvl-0  lvl-1   ( lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
				conductance_set_levels_sum(cell, 2,  (qr.x[17]-1)*qval.x[17],260000+(qr.x[21]-1)*qval.x[21],    -0,     -1,  0.02,      0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05) // "beta_cad","","phi_cad"
				conductance_set_levels_sum(cell, 15, (qr.x[18]-1)*qval.x[18],             -0,    -0,    100,   250,       250,   250,   250,   250,   250,   250,   250,   250) // "Ra","",""
				
				
				run()
				
				sprint(tstra1, "batchdata/batchdata_t_%d.dat", bati+10000)
				savt = new File()
				savt.wopen(tstra1)
				rec_t.printf(savt)
				savt.close()
				
				sprint(tstra2, "batchdata/batchdata_v_%d.dat", bati+10000)
				savv = new File()
				savv.wopen(tstra2)
				rec_v.printf(savv)
				savv.close()
				
				sprint(tstra3, "batchdata/batchdata_s_%d.dat", bati+10000)
				savs = new File()
				savs.wopen(tstra3)
				qr.printf(savs)
				savs.close()				
				
				//---
				sprint(tstra4, "batchdata/batchdata_ipas_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				ripas.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_icap_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				ricap.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_ik_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				rik.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_ina_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				rina.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_iar_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				riar.printf(savi) // c
				savi.close()				
				sprint(tstra4, "batchdata/batchdata_ica_%d.dat", bati+10000) // c
				savi = new File()
				savi.wopen(tstra4)
				rica.printf(savi) // c
				savi.close()				
				
		}
		
}

