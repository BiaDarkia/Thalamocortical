load_file("nrngui.hoc")
load_file("mview.hoc")
load_file("../nrntraub/hoc/traubcon.hoc")
load_file("fortmap.hoc")
load_file("../nrntraub/cell_templates.hoc")
load_file("cells/spinstell_template_n.hoc")


// til the shift bug in the mod files are fixed (table depends on range variable)
usetable_naf2 = 0
usetable_naf = 0
usetable_napf_spinstell = 0
usetable_napf_tcr = 0

objref runinfo_, choice_, cell, nil, stim1, stim2, mchoice_
runinfo_ = new List()
strdef tstr1, tstr2
for i=1,14 {getstr(tstr1) runinfo_.append(new String(tstr1))}
deepaxax	0 0.4
deepbask 	0 0.3
deepLTS		0 0.4
nontuftRS	0 0.8
nRT		0 0.3
spinstell	0 -0.25 10 0.25
supaxax		0 0.4
supbask		0 0.4
supLTS		0 0.4
suppyrFRB	0 0.0 10 0.4
suppyrRS	0 0.0 5 0.75
TCR		0 -0.9 100 0.5
tuftIB		0 0 10 1.5
spinstell_n	0 -0.25 10 0.25

// replaced the below to be able to switch spinstell
// tuftRS		0 -0.4 50 0.8

// load_file("onecell.ses")
proc exact() {
	normal_ = ($1 == 0)
	exact_ = ($1 != 0)
	runcell(cellnum)
}

proc runcell_simple() {local i, t1,a1,t2,a2  localobj vvec, tvec, f, g
		i = sscanf(runinfo_.object($1).s, "%s %lf %lf %lf %lf", tstr1, &t1, &a1, &t2, &a2)		
		cellnum = $1
		cell = nil
		sprint(tstr2, "cell = new %s()", tstr1)
		execute(tstr2)	
		// access cell.comp[1]
		// define_shape()
		// if (exact_) { traubexact(cell, tci) }
}

objectvar cell_list_
objref tmpcell
{ cell_list_ = new List() }
proc runcell_getnewcell() {local i, t1,a1,t2,a2  localobj vvec, tvec, f, g
		i = sscanf(runinfo_.object($1).s, "%s %lf %lf %lf %lf", tstr1, &t1, &a1, &t2, &a2)
		sprint(tstr2, "tmpcell = new %s()", tstr1)
		execute(tstr2)
		cell_list_.append(tmpcell)
}

load_file("myplot.hoc")

// original setup with below:
// >>>  runcell_simple(5)


// new setup spinstell_n
runcell_simple(13) 

// objref qr
// qr = new Vector(0)
// qr.append(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)


// highindex = 1
// lowindex = mcell_ran4_init()

// for i=0, qr.size()-1 {
// 		rndn = mcell_ran4(&highindex)
// 		if (rndn >2/3) {
// 				// increase
// 				qr.x[i] = qr.x[i]*1.01
// 		} else if (rndn >1/3) {
// 				// do nothing
// 		} else {
// 				// decrease
// 				qr.x[i] = qr.x[i]*0.99				
// 		}
// }

_ek =  -100*qr.x[0] // -90
_ena =   50*qr.x[1]
_ear =  -40*qr.x[2]
_epas = -65*qr.x[3]
// ----------------------- mech chg extra1 extra2  lvl-0  lvl-1 2x( lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
conductance_set_levels(cell, 11, qr.x[04], -2.50*qr.x[19],  _ena,  0.400, 0.150,    0.150,  0.150, 0.010, 0.010, 0.010, 0.010, 0.010, 0.010) // "naf2","fastNa_shift_naf2","ena"
conductance_set_levels(cell, 9,  qr.x[05],             -0,   _ek,  0.400, 0.100,    0.150,  0.150,    -1,    -1,    -1,    -1,    -1,    -1) // "kdr_fs","","ek"
conductance_set_levels(cell, 6,  qr.x[06],             -0,   _ek,  0.002, 0.030,    0.060,  0.004, 0.004, 0.004, 0.004, 0.004, 0.004, 0.004) // "ka","","ek"
conductance_set_levels(cell, 5,  qr.x[07],             -0,   _ek, 0.0001,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "k2","","ek"
//conductance_set_levels(cell, 12, qr.x[08], -2.50,  _ena,  -1,1.5E-4,       1.5E-4,1.5E-4,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5) // "napf_spinstell","fastNa_shift_napf_spinstell","ena"
conductance_set_levels(cell, 12, qr.x[08], -2.50*qr.x[20],  _ena,   4E-4,1.5E-4,    1.5E-4,1.5E-4,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5,1.0E-5) // "napf_spinstell","fastNa_shift_napf_spinstell","ena"
conductance_set_levels(cell, 8,  qr.x[09],             -0,   _ek,     -1,  0.01,    0.020,  0.020, 0.020,    -1,    -1,    -1,    -1,    -1) // "kc_fast","","ek"
conductance_set_levels(cell, 10, qr.x[10],             -0,   _ek,    -1,3.75E-3,    7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3,7.5E-3) // "km","","ek"
conductance_set_levels(cell, 7,  qr.x[11],             -0,   _ek,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "kahp_slower","","ek"
conductance_set_levels(cell, 3,  qr.x[12],             -0,    -0,     -1,0.0005,    0.001,  0.001, 0.001, 0.001, 0.001, 0.006, 0.006, 0.006) // "cal","",""
conductance_set_levels(cell, 4,  qr.x[13],             -0,    -0,     -1,0.0001,    0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002,0.0002) // "cat_a","",""
conductance_set_levels(cell, 1,  qr.x[14],            0.0,  _ear,     -1,2.5E-4,    0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005) // "ar","m0_ar","erev_ar"
conductance_set_levels(cell, 13, qr.x[15],             -0, _epas,  0.001,2.0E-5,    4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5,4.0E-5) // "pas","e_pas",""
conductance_set_levels(cell, 14, qr.x[16],   -0,    -0,    0.9,   0.9,       1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8,   1.8) // "cm","",""

// ----------------------- mech chg extra1 extra2  lvl-0  lvl-1   ( lvl-2   lvl-3  lvl-4  lvl-5  lvl-6  lvl-7  lvl-8  lvl-9 )
conductance_set_levels(cell, 2,  qr.x[17],260000*qr.x[21],    -0,     -1,  0.02,      0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05,  0.05) // "beta_cad","","phi_cad"
conductance_set_levels(cell, 15, qr.x[18],             -0,    -0,    100,   250,       250,   250,   250,   250,   250,   250,   250,   250) // "Ra","",""



// Use custom mechanism ri_rngvar to copy the ri values to a range mechanism
// forall insert rngvar  // Ted recommended finitalize() but not needed due to geometry already specd
// forall for (x,0) ri_rngvar(x) = ri(x) // skip the 0 areas at 0 and 1
		


// export_text(5)

// dyb changed from 0
//runcell(5)


objref cell2

objref fih0_, fih1_
fih0_ = new FInitializeHandler(0, "finit0()")
fih1_ = new FInitializeHandler(1, "finit1()")

proc finit0() { local ix, idx1 localobj lcell
		// init every other cell in a list
		if (cell_list_.count() > 0) {
				for idx1=0, cell_list_.count()-1 {
						lcell = cell_list_.o[idx1]
						ix = lcell.type()
						forsec lcell.all { v = type_vinit.x[ix] }
				}	
		}
		if (cell != nil) {
				ix = cell.type()
				print "ran finit0() cell.type(): ",ix, " setting v: ",type_vinit.x[ix]
				forsec cell.all { v = type_vinit.x[ix] }
				if (ix == TCRtype) {
						forsec cell.all { v = -85 }
				}
		}
		if (cell2 != nil) {
				ix = cell2.type()
				print "ran finit0() cell2.type(): ",ix, " setting v: ",type_vinit.x[ix]
				forsec cell2.all { v = type_vinit.x[ix] }
				if (ix == TCRtype) {
						forsec cell2.all { v = -85 }
				}
		}
}

proc finit1() { local ix
		print "ran finit1()"
		if (cell != nil) {
				ix = cell.type()
				if (ix == TCRtype) {
						print "ran finit1() cell1.type(): ",ix, " setting v: ",type_vinit.x[ix]
						forsec cell.all { v = type_vinit.x[ix] }
				}
		}
		if (cell2 != nil) {
				ix = cell2.type()
				print "ran finit1() cell2.type(): ",ix, " setting v: ",type_vinit.x[ix]
				forsec cell2.all { v = type_vinit.x[ix] }
				if (ix == TCRtype) {
						forsec cell2.all { v = type_vinit.x[ix] }
				}
		}
}


// naf2
// PARAMETER { 
//         fastNa_shift = 0 : orig -3.5 (mV)
//         a = 0 (1)
//         b = 0 (1)
//         c = 0 (1)
//         d = 0 (1)
//         gbar = 0.0         (mho/cm2)
//         v (mV) ena                 (mV)  
// } 

// napf_spinstell
// PARAMETER { 
//         fastNa_shift = -2.5 (mV)
//         a = 0 (1)
//         b = 0 (1)
//         c = 0 (1)
//         d = 0 (1)
//         gbar = 0.0         (mho/cm2)
//         v (mV) ena                 (mV)  
// } 

// kc_fast.mod
// PARAMETER { 
//         gbar = 0.0      (mho/cm2)
//         v (mV) ek               (mV)  
//         cai             (mM)
// } 

// kahp_slower.mod
// PARAMETER { 
//         gbar = 0.0      (mho/cm2)
//         v               (mV) 
//         ek              (mV)  
//         cai             (mM)
// }

// cal.mod
// implicit vca 125

// cat_a.mod
// implicit vca 125

// ar.mod
// PARAMETER { 
//         gbar = 0.0      (mho/cm2)
//         v               (mV) 
//         erev = -35      (mV)  
//         m0 = 0.25
// }

